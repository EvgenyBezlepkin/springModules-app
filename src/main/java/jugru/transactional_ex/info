

!!!Аннотация @Transactional будет проигнорирована и не выбросит исключения если применять ее к private, protected или default модификаторами доступа.


Когда Spring загружает определения бина и настроен на поиск аннотаций @Transactional,
он создаст эти proxy-объекты вокруг нашего бина. Эти proxy-объекты являются экземплярами классов,
которые будут автоматически генерироваться во время выполнения.
Поведение этих proxy-объектов по умолчанию при вызове метода — это просто вызвать тот же метод в “target” бин (т.е. наш бин).

Proxy также могут быть снабжены “перехватчиками”, и, когда они присутствуют, эти “перехватчики” будут вызываться proxy-сервером до того,
как он вызовет наш целевой метод бина. Для целевого бина, аннотированного с помощью @Transactional, Spring создаст TransactionInterceptor
и передаст его созданному proxy-объекту. Поэтому, когда мы вызываем метод из клиентского кода, мы вызываем метод на proxy-объекте,
который сначала вызывает TransactionInterceptor (который начинает транзакцию),
который, в свою очередь, вызывает метод в нашем целевом бине.
Когда вызов завершается, TransactionInterceptor принимает и завершает/откатывает транзакцию.


Алгоритм создания новой транзакции:
— создается новый EntityManager
— EntityManager привязывается к “текущему потоку Thread”
— берется соединение из пула соединений БД
— это соединение привязывается к “текущему потоку Thread” при помощи ThreadLocal
(Класс ThreadLocal предоставляет локальные переменные потока. Каждый поток имеет свою собственную инициализированную копию переменной)


spring boot подключает transactionManager
это означает, что классы, помеченные @Transactional, должны быть обернуты аспектом транзакций.


также создается бин transactionInterceptor.
1. Считывает атрибуты (параметры), которые были у аннотации @Transactional
2. Предоставляет интерфейс PlatformTransactionManager — основной интерфейс для всех TransactionManager
(TransactionManager взаимодействует непосредственно с БД для управлением транзакций)
3. Идет создание транзакций
4. Происходит вызов основного метода
5. Происходит commit транзакции если нет exception


TransactionDefinition содержит в себе конфигурацию транзакции, уровень изоляции и propagation.
TransactionStatus возвращает статус текущей транзакции.


















