
Пример использования postProcessAfterInitialization (class BeanPostProcessor)

В этом примере пишется обработчик пользовательской классовой аннотации @Profile
В методе postProcessBeforeInitialization фиксируются классы, которые аннотированы @Profile
В конструкторе ProfilingHandlerBPP создается MBean
В методе postProcessAfterInitialization генерируется прокси-объект,
с помощью которого мы оборачиваем каждый метод оригинального объекта необходимой логикой


Про прокси
1. CGLib (Code Generation Library) — должен наследовать от оригинального класса, переопределять его методы и добавлять  свою логику.
2. Dynamic proxy (JDK) — должен имплементировать те же самые интерфейсы.

Dynamic proxy могут перекрывать только public методы.
CGLib proxy — кроме public, также и protected методы и package.
Если мы явно не указали для среза (pointcut) ограничение “только для public методов”, то потенциально можем получить неожиданное поведение.
