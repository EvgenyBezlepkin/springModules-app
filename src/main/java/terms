
Bean – объект бизнес-логики в терминологии Spring Framework.

BeanDefinition – описание того, как создавать бин. Объект хранит его тип, метаинформацию, набор параметров для конструктора.

BeanFactory – главная точка входа в DI-контейнер.
Хранит BeanDefinition-ы, умеет создавать по ним экземпляры бинов, или выдавать существующие, в зависимости от скоупа.

BeanPostProcessor – донастраивает только что созданные бины, перед тем как положить их в контейнер.
Типичное место, чтобы оборачивать бины в прокси. Также с помощью такого пост-процессора внедряются @Autowired-зависимости.
Пост-процессоры бинов живут внутри экземпляра BeanFactory.

BeanFactoryPostProcessor – тоже пост-обработчик, но для определений бинов (BeanDefinition).
Обычно используется для модификации параметров или класса, из которых будут строиться бины.

Для создания определений бинов в основном применяются классы и интерфейсы *BeanDefinitionReader.
Некоторые из них вызываются прямо из контекста приложения, другие реализуют BeanFactoryPostProcessor.
Один такой пост-процессор, например, отвечает за добавление определений бинов по аннотациям @Component и @Configuration.

Реализация интерфейса ApplicationContext – основное хранилище конфигурации Spring-приложения (или его части).
Контекст неизменяем, но может быть целиком перезагружен.
Xml-файл конфигурации на старте приложения превращается в объект *XmlApplicationContext.
Для конфигурации на аннотациях создастся AnnotationConfigApplicationContext.