
материал доклада Е. Борисова и К. Толкачева

1 создание пользовательского стартера

    1 создается как отдельный проект и подключается как зависимость в тот проект, в котором должен работать
    2 создаем CustomListener (необходимо задекларировать в конфигурации (StarterConfiguration) или прописать в factories)
    3 в resources/META-INF/spring.factories необходимо разрешить автоконфигурацию бинов из конфига
    (Если необходимо слушать все event-ы, которые кидает Spring, а не только ContextRefreshedEvent и ContextStartedEvent,
    то нужно прописывать listener не как бин, а через spring.factories)

2 создание @ConditionalOnStarter (настройка условий для запуска стартера)

    1 создается пользовательская аннотация (@ConditionalOnStarter)
    2 в классе аннотации указывается класс-обработчик (@Conditional(OnStarterConditional.class))
    3 класс-обработчик наследует от класса Condition и и мплементирует метод matches(ConditionContext context, AnnotatedTypeMetadata metadata)

3 автокомплит

    1 создаем application.yml в проекте, куда подключен стартер (если его нет)
    2 создаем файл StarterProperties (принимает аннотацию @ConfigurationProperties(prefix = ...)
    3 аннотация задает общий префикс, а название полей - это дальнейшие расширения (private List<String> destinations;)
    4 в итоге в файле application.yml становится возможен автокомплит по префиксу
    (необходимо подключить spring-boot-configuration-processor, который генерирует json для автокомплита, его можно найти в таргетре или в джаре)
    5 добавить бин пропертис в листенер и написать логику
    6 добавить @EnableConfigurationProperties(StarterProperties.class) в конфигурацию

4 добавляем кондишн (@ConditionalOnProperty("starter.destinations")) на бин листенера,
чтобы, если в application.yml не прописаны нужные свойства, листенер не создавался

5 зависимость одного бина от другого
(если нет пользовательского листенера, то создать свой)

    1 проставить аннотацию (@ConditionalOnMissingBean(ApplicationListener.class)) в конфиге стартера
    (в этом случае при наличии одноинтерфейсного бина в проекте, бин из стартера не будет создаваться)

6 задать профиль

    1 анализ профилей проводится спрингом в начале эатапа инициализации контекста,
    в контекст загружаются те BeanDefinition которые удолветворяют переданному при старте имени провиля
    2 перед построением контекста загружена среда (Environment)
    3 ApplicationContextInitializer отрабатывает, когда контекст уже создан, но еще в нем нет ничего, кроме environment.
    4 добавление профиля если не установлен (EnvironmentPostProcessor)
    (все декларируется в factories)














